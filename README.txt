This collection of scripts supports the extraction of FRET efficiency, Donor (Donor excitation), Donor (Acceptor excitation), Acceptor (Donor excitation) and Acceptor (Acceptor excitation) traces for single molecules from tiff-stack data corresponding to alternating frames of donor and acceptor excitation windows (ALternating Laser Exitation, ALEX). This is done utilizing modified existing MatLab codes written in the Rothenberg Lab as well as additional Python codes for calculation of FRET correction parameters. 

These functionalities are available via other ALEX or MFD-focused FRET analysis software suites, and these scripts are provided as-is during migration of our in-lab written code base to Python for extensibility and addition of additional functionalities. Other software suites that include these scripts' current functionalities or similar include several tools listed by the FRET Community (https://fret.community/software/). These include MASH-FRET, DEEP-FRET, iSMS, DeepLASI, and FRETBOARD, amongst others.


Requirements:
MatLab scripts were written for MatLab 2018b and all required supporting codes are included in the MatLabTraceExtractions zip. Simply unzip the folder and add the resulting directory to MatLab Path so the channels_map and mainBatch scripts can access the relevant dependencies. These scripts can be run as previously described (need citation if available from RLab FRET papers).

Python:
Python scripts were written for and testing in Python 3.9.13
Package dependencies are the latest versions of:
numpy 1.23.5
pandas 1.5.3
matplotlib 3.8.4
fnmatch 0.5.2
scikit-learn 1.2.2
scikit-image 0.18.1
scipy 1.10.1
tifffile 23.2.28

Installation:
Python packages available through pip or Anaconda package managers.
Scripts require no other installation, although in this version are intended to be run cell-by cell in an Interactive Python IDE supporting the #%% cell delimiter.
Installation of packages depends on package manager but typically will take <10 minutes.

Data and outputs:
Tiff stack data corresponding to multi-frame ALEX movies are the expected raw data for the MatLab mapping and trace extraction scripts. Alternating frames should be ordered donor-acceptor-donor... and alternating frames should be contained in the same stack dimension (TXY dimensions). Output from trace extraction scripts should be .mat files containing MatLab data sctructures containing the relevant frame-by-frame trace data. These are the expected inputs for the Python correction parameter calculation pipeline. 

To calculate ALEX correction parameters to convert traces to fully-corrected FRET efficiency (convert to distances via the well-known E=(1+(r/R0)^6)^(-1) equation) and fluorescence stoichiometry traces. The outputs are the correction parameters alpha, beta, gamma, and delta detailed in https://www.nature.com/articles/s41592-018-0085-0. Finally, the .mat traces along with the known correction parameters can be used as inputs to ApplyAlexCorr_toSelected.py to obtain output .mat files containing fully-corrected FRET efficiency trace data for kinetics analysis, histogramming, etc.

Instructions:
Required data: 
Mapping image - single frame vertically split green/red bead image with both channels illuminated simultaneously
Standards FRET data: Donor only, acceptor-only, and FRET standard samples measured in ALEX mode with vertically spli donor/acceptor images (donor/green on left, acceptor/red on right). Here, we use lab standards corresponding to "low," "medium," and "high" FRET efficiencies, or 20, 15, and 10 bp of dsDNA between fluorophores incorporated into the DNA backbone.


MatLab:
As previously described, we generate and apply parameters for mapping of distinct color channels to one another using a polywarp operation in MatLab. Our lab utilizes a single emccd camera with emission from the two color channels sent to each half of the camera chip (split vertically). The included MatLab script "channels_map_2chHalfChip_rgb_emccd.m" can be run from the MatLab editor and will accept a single-frame tiff image with bright beads in both color channels as input. Beads in each color channel are overlaid and then the user selects 9 pairs of matching beads. The script then uses these selections to fit polywarp parameters to overlay all beads in the green image against the reference channel (RED) beads. Next, "mainBatch_FRET_ALEX_wholeim_alltraces_test_splitimsel.m" expects a directory of images (structured as "data/<samplename>/<tiff images>") each named spool.tif, spool_1.tif, spool_2.tif... alongside the .map file generated by the mapping script. The resulting ".mat" files will be parsed by the Python scripts which expect the name of the directory containing these .mat files.
"DataWrapper_ebFRET_modified_matfiles_forFRET.m" should be run at this point to obtain plaintext FRET trace files used for ebFRET and similar kinetic analysis software suites.

Python:
Following MatLab based trace extraction, Python scripts are to be run in the following order:
"Calculate_ALEX_alpha_delta.py" corresponding to the alpha and delta correction parameters on which beta and gamma depend (directory containing trace files from MatLab loaded as input). Output is a text file in an indicated corrections folder containing alpha and delta values as well as alpha/delta-corrected E vs. S 2d histogram images.
"Calculate_ALEX_beta_gamma_4_24_Nsamps.py" corresponding to the beta and gamma correction parameter calculations (alpha and delta file in output directory from previous step, as well as .mat trace files as input). Will generate output text file containing beta and gamma values in corrections folder, as well as corrected FRET efficiency v Stoichiometry histogram images.
"ApplyAlexCorr_toSelected.py" corresponding to application of correction parameters to obtain the fully corrected FRET and Stoichiometry traces. Input data is .dat files converted to ebFRET-compatible text format using DataWrapper_ebFRET script in MatLab at an earlier step. Output files are in the same format but contain gamma-corrected donor, alpha and delta corrected acceptor, and fully corrected FRET efficiency values for use in ebFRET or similar analysis suites.

Runtime on test machine equipped with 11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz 1.80 GHz was ~10 minutes. 

Outline:

Load mapping images
Generate polywarp mapping parameters
Load raw data traces for donor-only, acceptor-only, FRET standards
Extract raw donor and acceptor traces
Convert traces from .mat to .dat format
Calculate alpha and delta parameters from donor-only, acceptor-only trace data simultaneously
Calculate beta, gamma from multiple FRET standard datasets simultaneously, corrected for alpha and delta
Apply correction parameters to .dat format extracted traces for both FRET standards and experimental data of interest


